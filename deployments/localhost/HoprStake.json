{
  "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lockToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "boostTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "factorReplaced",
          "type": "bool"
        }
      ],
      "name": "Redeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "actualAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "virtualAmount",
          "type": "uint256"
        }
      ],
      "name": "Released",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardFueled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "actualAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "virtualAmount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "increment",
          "type": "uint256"
        }
      ],
      "name": "Sync",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASIC_FACTOR_NUMERATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BASIC_START",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BOOST_CAP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FACTOR_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOCK_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROGRAM_END",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SEED_FACTOR_NUMERATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SEED_START",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "actualLockedTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "virtualLockedTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastSyncTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cumulatedRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "availableReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getCumulatedRewardsIncrement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "investors",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "caps",
          "type": "uint256[]"
        }
      ],
      "name": "lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftContract",
      "outputs": [
        {
          "internalType": "contract IHoprBoost",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "onTokenTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "reclaimErc20Tokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "reclaimErc721Tokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "redeemedFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "redeemedFactorIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "redeemedNft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "redeemedNftIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "sync",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "operatorData",
          "type": "bytes"
        }
      ],
      "name": "tokensReceived",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLocked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1af655280e51ea6686cffca7f0145bd41a66605ac89522481fedcf40e59fe269",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
    "transactionIndex": 0,
    "gasUsed": "2039558",
    "logsBloom": "0x
    "blockHash": "0x2870552a02f3cba7ed56c14f97fa1aa031d3e8db52d7f6a42444139888ef0a57",
    "transactionHash": "0x1af655280e51ea6686cffca7f0145bd41a66605ac89522481fedcf40e59fe269",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 7,
        "transactionHash": "0x1af655280e51ea6686cffca7f0145bd41a66605ac89522481fedcf40e59fe269",
        "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x2870552a02f3cba7ed56c14f97fa1aa031d3e8db52d7f6a42444139888ef0a57"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 7,
        "transactionHash": "0x1af655280e51ea6686cffca7f0145bd41a66605ac89522481fedcf40e59fe269",
        "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x00000000000000000000000070997970c51812dc3a010c7d01b50e0d17dc79c8"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x2870552a02f3cba7ed56c14f97fa1aa031d3e8db52d7f6a42444139888ef0a57"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 7,
        "transactionHash": "0x1af655280e51ea6686cffca7f0145bd41a66605ac89522481fedcf40e59fe269",
        "address": "0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24",
        "topics": [
          "0x93baa6efbd2244243bfee6ce4cfdd1d04fc4c0e9a786abd3a41313bd352db153",
          "0x0000000000000000000000005fc8d32690cc91d4c39d9d3abcbd16989f875707",
          "0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b",
          "0x0000000000000000000000005fc8d32690cc91d4c39d9d3abcbd16989f875707"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x2870552a02f3cba7ed56c14f97fa1aa031d3e8db52d7f6a42444139888ef0a57"
      }
    ],
    "blockNumber": 7,
    "cumulativeGasUsed": "2039558",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
    "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9"
  ],
  "solcInputHash": "38fc2190ccf57616284f5e0aa38db4b5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lockToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"boostTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"factorReplaced\",\"type\":\"bool\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"actualAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"virtualAmount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardFueled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"actualAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"virtualAmount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"increment\",\"type\":\"uint256\"}],\"name\":\"Sync\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIC_FACTOR_NUMERATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASIC_START\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOOST_CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FACTOR_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCK_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROGRAM_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SEED_FACTOR_NUMERATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SEED_START\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualLockedTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"virtualLockedTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSyncTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumulatedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getCumulatedRewardsIncrement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"investors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"caps\",\"type\":\"uint256[]\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftContract\",\"outputs\":[{\"internalType\":\"contract IHoprBoost\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"reclaimErc20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"reclaimErc721Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"redeemedFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"redeemedFactorIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"redeemedNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"redeemedNftIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimRewards(address)\":{\"details\":\"Sync rewards and claim them\",\"params\":{\"account\":\"address Account whose stake rewards will be synced and claimed.\"}},\"constructor\":{\"details\":\"Provide NFT contract address. Transfer owner role to the new owner address.  At deployment, it also registers the lock contract as an ERC777 recipient. \",\"params\":{\"_newOwner\":\"address Address of the new owner. This new owner can reclaim any ERC20 and ERC721 token being accidentally sent to the lock contract. \",\"_nftAddress\":\"address Address of the NFT contract.\"}},\"getCumulatedRewardsIncrement(address)\":{\"details\":\"Returns the increment of cumulated rewards during the \\u201clastSyncTimestamp\\u201d and current block.timestamp. \",\"params\":{\"_account\":\"address Address of the account whose rewards will be calculated.\"}},\"lock(address[],uint256[])\":{\"details\":\"Only owner can call this function before program starts to store virtual lock for seed investors.  If the investor hasn't locked any token in this account, create an \\\"Account\\\" with {0, caps[i], block.timestamp, 0, 0}.  If the investor has locked some tokens in this account, update its \\u201cvirtualLockedTokenAmount\\u201d.\",\"params\":{\"caps\":\"uint256[] Array of their virtually locked tokens.\",\"investors\":\"address[] Array of seed investors accounts.\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever a boost `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} when redeeming, this function is called. Boost factor associated with the  It must return its Solidity selector to confirm the token transfer upon success.\",\"params\":{\"data\":\"bytes hex information provided by the token holder (if any)\",\"from\":\"address token holder address\",\"operator\":\"address operator requesting the transfer\",\"tokenId\":\"uint256 amount of tokens to transfer\"}},\"onTokenTransfer(address,uint256,bytes)\":{\"details\":\"ERC677 hook. Token holders can send their tokens with `transferAndCall` to the stake contract.   After PROGRAM_END, it refuses tokens; Before PROGRAM_END, it accepts tokens xHOPR token, sync  Account state, and update totalLocked. \",\"params\":{\"_data\":\"bytes Data being sent along with token transfer\",\"_from\":\"address Address of tokens sender\",\"_value\":\"uint256 token amount being transferred\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"reclaimErc20Tokens(address)\":{\"details\":\"Reclaim any ERC20 token being accidentally sent to the contract.\",\"params\":{\"tokenAddress\":\"address ERC20 token address.\"}},\"reclaimErc721Tokens(address,uint256)\":{\"details\":\"Reclaim any ERC721 token being accidentally sent to the contract.\",\"params\":{\"tokenAddress\":\"address ERC721 token address.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"sync(address)\":{\"details\":\"Manually sync account's reward states\",\"params\":{\"account\":\"address Account whose stake rewards will be synced.\"}},\"tokensReceived(address,address,address,uint256,bytes,bytes)\":{\"details\":\"ERC777 hook. To receive wxHOPR to fuel the reward pool with `send()` method. It updates the availableReward by tokenAmount.\",\"params\":{\"amount\":\"uint256 amount of tokens to transfer\",\"from\":\"address token holder address\",\"operator\":\"address operator requesting the transfer\",\"operatorData\":\"bytes extra information provided by the operator (if any)\",\"to\":\"address recipient address\",\"userData\":\"bytes hex information provided by the token holder (if any)\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unlock(address)\":{\"details\":\"Unlock staking\",\"params\":{\"account\":\"address Account that staked tokens.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimRewards(address)\":{\"notice\":\"public function of ``_sync`` + ``_claim``\"},\"sync(address)\":{\"notice\":\"public function of ``_sync``.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HoprStake.sol\":\"HoprStake\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Recipient {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0fd59f83d16f090c27a8105db0f4ad05b0f5d127f9878b82ebf0ad2bbc4e3f03\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820Registry {\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(\\n        address account,\\n        bytes32 _interfaceHash,\\n        address implementer\\n    ) external;\\n\\n    /**\\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     * @param account Address of the contract for which to update the cache.\\n     * @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not.\\n     * If the result is not cached a direct lookup on the contract address is performed.\\n     * If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     * {updateERC165Cache} with the contract address.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n}\\n\",\"keccak256\":\"0xdf30b8f2bba82b86661928377f70ba4b68739a799f8bad36e542144811aa70d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute.\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x2cc1535d318fe533ffa4ad30de28f5abed305ff748bc72d0344072ac10007e29\",\"license\":\"MIT\"},\"contracts/HoprStake.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./IHoprBoost.sol\\\";\\n\\n/**\\n * \\n */\\ncontract HoprStake is Ownable, IERC777Recipient, IERC721Receiver, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using Math for uint256;\\n\\n    struct Account {\\n        uint256 actualLockedTokenAmount; // The amount of LOCK_TOKEN being actually locked to the contract. \\n                                         // Those tokens can be withdrawn after \\u201cUNLOCK_START\\u201d\\n        uint256 virtualLockedTokenAmount; // The amount of LOCK_TOKEN token being virtually locked to the contract. \\n                                          // This field is only relevant to seed investors. Those tokens cannot be withdrawn after \\u201cUNLOCK_START\\u201d.\\n        uint256 lastSyncTimestamp; // Timestamp at which any \\u201cAccount\\u201d attribute gets synced for the last time. \\n        uint256 cumulatedRewards; // Rewards accredited to the account at \\u201clastSyncTimestamp\\u201d.\\n        uint256 claimedRewards; // Rewards claimed by the account.\\n    }\\n\\n    uint256 public constant BASIC_START = 1627387200; // Block timestamp at which incentive program starts for accounts that stake real LOCK_TOKEN. Default value is 1627387200 (July 27th 2021 14:00 CET).\\n    uint256 public constant SEED_START = 1630065600; // Block timestamp at which incentive program starts for seed investors that promise to stake their unreleased tokens. Default value is 1630065600 (August 27th 2021 14:00 CET).\\n    uint256 public constant PROGRAM_END = 1642424400; // Block timestamp at which incentive program ends. From this timestamp on, tokens can be unlocked. Default value is 1642424400 (Jan 17th 2022 14:00 CET).\\n    uint256 public constant FACTOR_DENOMINATOR = 1e12; // Denominator of the \\u201cBasic reward factor\\u201d. Default value is 1e12.\\n    uint256 public constant BASIC_FACTOR_NUMERATOR = 5787; // Numerator of the \\u201cBasic reward factor\\u201d, for all accounts (except for seed investors) that participate in the program. Default value is 5787, which corresponds to 5.787/1e9 per second. Its associated denominator is FACTOR_DENOMINATOR. \\n    uint256 public constant SEED_FACTOR_NUMERATOR = 7032; // Numerator of the \\\"Seed reward factor\\u201d, for all accounts (except for seed investors) that participate in the program. Default value is 7032, which corresponds to 7.032/1e9 per second. Its associated denominator is FACTOR_DENOMINATOR. \\n    uint256 public constant BOOST_CAP = 1e24; // Cap on actual locked tokens for receiving additional boosts.\\n    address public LOCK_TOKEN = 0xD057604A14982FE8D88c5fC25Aac3267eA142a08; // Token that HOPR holders need to lock to the contract: xHOPR address.\\n    address public REWARD_TOKEN = 0xD4fdec44DB9D44B8f2b6d529620f9C0C7066A2c1; // Token that HOPR holders can claim as rewards: wxHOPR address\\n\\n    IHoprBoost public nftContract; // Address of the NFT smart contract.\\n    mapping(address=>mapping(uint256=>uint256)) public redeemedNft; // Redeemed NFT per account, structured as \\u201caccount -> index -> NFT tokenId\\u201d.\\n    mapping(address=>uint256) public redeemedNftIndex; // The last index of redeemed NFT of an account. It defines the length of the \\u201credeemedBoostToken mapping.\\n    mapping(address=>mapping(uint256=>uint256)) public redeemedFactor; // Redeemed boost factor per account, structured as \\u201caccount -> index -> NFT tokenId\\u201d.\\n    mapping(address=>uint256) public redeemedFactorIndex; // The last index of redeemed boost factor factor of an account. It defines the length of the \\u201credeemedFactor\\u201d mapping.\\n\\n    mapping(address=>Account) public accounts; // It stores the locked token amount, earned and claimed rewards per account.\\n    uint256 public totalLocked;  // Total amount of tokens being locked in the incentive program. Virtual token locks are not taken into account.\\n    uint256 public availableReward; // Total amount of reward tokens currently available in the lock.\\n\\n    // setup ERC1820\\n    IERC1820Registry private constant ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n    bytes32 private constant TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\\\"ERC777TokensRecipient\\\");\\n\\n    event Sync(address indexed account, uint256 indexed increment);\\n    event Staked(address indexed account, uint256 indexed actualAmount, uint256 indexed virtualAmount);\\n    event Released(address indexed account, uint256 indexed actualAmount, uint256 indexed virtualAmount);\\n    event RewardFueled(uint256 indexed amount);\\n    event Redeemed(address indexed account, uint256 indexed boostTokenId, bool indexed factorReplaced);\\n    event Claimed(address indexed account, uint256 indexed rewardAmount);\\n\\n    /**\\n     * @dev Provide NFT contract address. Transfer owner role to the new owner address. \\n     * At deployment, it also registers the lock contract as an ERC777 recipient. \\n     * @param _nftAddress address Address of the NFT contract.\\n     * @param _newOwner address Address of the new owner. This new owner can reclaim any ERC20 and ERC721 token being accidentally sent to the lock contract. \\n     */\\n    constructor(address _nftAddress, address _newOwner, address _lockToken, address _rewardToken) {\\n        // implement in favor of testing\\n        uint chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        if (chainId != 100) {\\n            LOCK_TOKEN = _lockToken;\\n            REWARD_TOKEN = _rewardToken; \\n        }\\n        nftContract = IHoprBoost(_nftAddress);\\n        transferOwnership(_newOwner);\\n        ERC1820_REGISTRY.setInterfaceImplementer(address(this), TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\\n    }\\n\\n    /**\\n     * @dev ERC677 hook. Token holders can send their tokens with `transferAndCall` to the stake contract.  \\n     * After PROGRAM_END, it refuses tokens; Before PROGRAM_END, it accepts tokens xHOPR token, sync \\n     * Account state, and update totalLocked. \\n     * @param _from address Address of tokens sender\\n     * @param _value uint256 token amount being transferred\\n     * @param _data bytes Data being sent along with token transfer\\n     */\\n    function onTokenTransfer(\\n        address _from, \\n        uint256 _value, \\n        // solhint-disable-next-line no-unused-vars\\n        bytes memory _data\\n    ) external returns (bool) {\\n        require(msg.sender == LOCK_TOKEN, \\\"HoprStake: Only accept LOCK_TOKEN in staking\\\");\\n        require(block.timestamp <= PROGRAM_END, \\\"HoprStake: Program ended, cannot stake anymore.\\\");\\n\\n        _sync(_from);\\n        accounts[_from].actualLockedTokenAmount += _value;\\n        totalLocked += _value;\\n        emit Staked(_from, _value, 0);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev ERC777 hook. To receive wxHOPR to fuel the reward pool with `send()` method. It updates the availableReward by tokenAmount.\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes hex information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     */\\n    function tokensReceived(\\n        // solhint-disable-next-line no-unused-vars\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        // solhint-disable-next-line no-unused-vars\\n        bytes calldata userData,\\n        // solhint-disable-next-line no-unused-vars\\n        bytes calldata operatorData\\n    ) external override {\\n        require(msg.sender == REWARD_TOKEN, \\\"HoprStake: Sender must be wxHOPR token\\\");\\n        require(to == address(this), \\\"HoprStake: Must be sending tokens to HoprStake contract\\\");\\n        require(from == owner(), \\\"HoprStake: Only accept owner to provide rewards\\\");\\n        availableReward += amount;\\n        emit RewardFueled(amount);\\n    }\\n\\n    /**\\n     * @dev Whenever a boost `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * when redeeming, this function is called. Boost factor associated with the \\n     * It must return its Solidity selector to confirm the token transfer upon success.\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param tokenId uint256 amount of tokens to transfer\\n     * @param data bytes hex information provided by the token holder (if any)\\n     */\\n    function onERC721Received(\\n        // solhint-disable-next-line no-unused-vars\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        // solhint-disable-next-line no-unused-vars\\n        bytes calldata data\\n    ) external override returns (bytes4) {\\n        require(_msgSender() == address(nftContract), \\\"HoprStake: Cannot SafeTransferFrom tokens other than HoprBoost.\\\");\\n        require(block.timestamp <= PROGRAM_END, \\\"HoprStake: Program ended, cannot redeem boosts.\\\");\\n        // Account memory account = accounts[from];\\n        _sync(from);\\n\\n        // redeem NFT\\n        redeemedNft[from][redeemedNftIndex[from]] = tokenId;\\n        redeemedNftIndex[from] += 1;\\n\\n        // update boost factor\\n        uint256 typeId = nftContract.typeIndexOf(tokenId);\\n        (uint256 factor, uint256 deadline) = nftContract.boostOf(tokenId);\\n        require(block.timestamp <= deadline, \\\"HoprStake: Cannot redeem an expired boost.\\\");\\n\\n        uint256 boostIndex = redeemedFactorIndex[from];\\n        uint256 index = 0;\\n        for (index; index < boostIndex; index++) {\\n            // loop through redeemed factors, replace the factor of the same type, if the current factor is larger.\\n            uint256 redeemedId = redeemedFactor[from][index];\\n            (uint256 newFactor, ) = nftContract.boostOf(tokenId);\\n\\n            if (nftContract.typeIndexOf(redeemedId) == typeId && newFactor <= factor) {\\n                redeemedFactor[from][index] = tokenId;\\n                emit Redeemed(from, tokenId, false);\\n                break;\\n            }\\n        }\\n        if (index == boostIndex) {\\n            // new type being redeemed.\\n            redeemedFactor[from][boostIndex] = tokenId;\\n            redeemedFactorIndex[from] += 1;\\n            emit Redeemed(from, tokenId, boostIndex == 0 ? false : true);\\n        }\\n\\n        return IERC721Receiver(address(this)).onERC721Received.selector;\\n    }\\n\\n    /**\\n    * @dev Only owner can call this function before program starts to store virtual lock for seed investors. \\n    * If the investor hasn't locked any token in this account, create an \\\"Account\\\" with {0, caps[i], block.timestamp, 0, 0}. \\n    * If the investor has locked some tokens in this account, update its \\u201cvirtualLockedTokenAmount\\u201d.\\n    * @param investors address[] Array of seed investors accounts.\\n    * @param caps uint256[] Array of their virtually locked tokens.\\n    */\\n    function lock(address[] calldata investors, uint256[] calldata caps) onlyOwner external {\\n        require(block.timestamp <= BASIC_START, \\\"HoprStake: Program ended, cannot stake anymore.\\\");\\n        require(investors.length <= caps.length, \\\"HoprStake: Length does not match\\\");\\n\\n        for (uint256 index = 0; index < investors.length; index++) { \\n            address investor = investors[index];\\n            accounts[investor].virtualLockedTokenAmount += caps[index];\\n            accounts[investor].lastSyncTimestamp = block.timestamp;\\n            emit Staked(investor, 0, caps[index]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Manually sync account's reward states\\n     * @notice public function of ``_sync``.\\n     * @param account address Account whose stake rewards will be synced.\\n     */\\n    function sync(address account) external {\\n        _sync(account); \\n    }\\n\\n    /**\\n     * @dev Sync rewards and claim them\\n     * @notice public function of ``_sync`` + ``_claim``\\n     * @param account address Account whose stake rewards will be synced and claimed.\\n     */\\n    function claimRewards(address account) public {\\n        _sync(account); \\n        _claim(account);\\n    }\\n\\n    /**\\n     * @dev Unlock staking\\n     * @param account address Account that staked tokens.\\n     */\\n    function unlock(address account) external {\\n        require(block.timestamp > PROGRAM_END, \\\"HoprStake: Program is ongoing, cannot unlock stake.\\\");\\n        uint256 actualStake = accounts[account].actualLockedTokenAmount;\\n        uint256 virtualStake = accounts[account].virtualLockedTokenAmount;\\n        _sync(account); \\n        accounts[account].actualLockedTokenAmount = 0;\\n        accounts[account].virtualLockedTokenAmount = 0;\\n        totalLocked -= actualStake;\\n        _claim(account);\\n        // unlock actual staked tokens\\n        IERC20(LOCK_TOKEN).safeTransfer(account, actualStake);\\n        // unlock redeemed NFTs\\n        for (uint256 index = 0; index < redeemedNftIndex[account]; index++) {\\n            nftContract.transferFrom(address(this), account, redeemedNft[account][index]);\\n        }\\n        emit Released(account, actualStake, virtualStake);\\n    }\\n\\n    /**\\n     * @dev Reclaim any ERC20 token being accidentally sent to the contract.\\n     * @param tokenAddress address ERC20 token address.\\n     */\\n    function reclaimErc20Tokens(address tokenAddress) external onlyOwner nonReentrant {\\n        uint256 difference;\\n        if (tokenAddress == LOCK_TOKEN) {\\n            difference = IERC20(LOCK_TOKEN).balanceOf(address(this)) - totalLocked;\\n        } else {\\n            difference = IERC20(tokenAddress).balanceOf(address(this));\\n        }\\n        IERC20(tokenAddress).safeTransfer(owner(), difference);\\n    }\\n\\n    /**\\n     * @dev Reclaim any ERC721 token being accidentally sent to the contract.\\n     * @param tokenAddress address ERC721 token address.\\n     */\\n    function reclaimErc721Tokens(address tokenAddress, uint256 tokenId) external onlyOwner nonReentrant {\\n        IHoprBoost(tokenAddress).transferFrom(address(this), owner(), tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns the increment of cumulated rewards during the \\u201clastSyncTimestamp\\u201d and current block.timestamp. \\n     * @param _account address Address of the account whose rewards will be calculated.\\n     */\\n    function getCumulatedRewardsIncrement(address _account) public view returns (uint256) {\\n        return _getCumulatedRewardsIncrement(_account);\\n    }\\n\\n    /**\\n     * @dev Calculates the increment of cumulated rewards during the \\u201clastSyncTimestamp\\u201d and block.timestamp. \\n     * current block timestamp and lastSyncTimestamp are confined in [BASIC_START, PROGRAMEND] for basic and boosted lockup,\\n     * and [SEED_START, PROGRAMEND] for seed investors.\\n     * @param _account address Address of the account whose rewards will be calculated.\\n     */\\n    function _getCumulatedRewardsIncrement(address _account) private view returns (uint256) {\\n        Account memory account = accounts[_account];\\n        if (block.timestamp <= BASIC_START || account.lastSyncTimestamp >= PROGRAM_END) {\\n            // skip calculation and return directly 0;\\n            return 0;\\n        }\\n        // Per second gain, for basic lock-up.\\n        uint256 gainPerSec = account.actualLockedTokenAmount * BASIC_FACTOR_NUMERATOR;\\n        \\n        // Per second gain, for additional boost, applicable to amount under BOOST_CAP\\n        for (uint256 index = 0; index < redeemedFactorIndex[_account]; index++) {\\n            uint256 tokenId = redeemedFactor[_account][index];\\n            (uint256 boost, ) = nftContract.boostOf(tokenId);\\n            gainPerSec += (account.actualLockedTokenAmount.min(BOOST_CAP)) * boost;\\n        }\\n\\n        return (\\n                gainPerSec * (\\n                block.timestamp.max(BASIC_START).min(PROGRAM_END) - \\n                account.lastSyncTimestamp.max(BASIC_START).min(PROGRAM_END)\\n                ) + account.virtualLockedTokenAmount * SEED_FACTOR_NUMERATOR * (    // Per second gain, for seed investor lock-up\\n                block.timestamp.max(SEED_START).min(PROGRAM_END) - \\n                account.lastSyncTimestamp.max(SEED_START).min(PROGRAM_END)\\n                )\\n            ) / FACTOR_DENOMINATOR;\\n    }\\n\\n    /**\\n     * @dev Update \\u201clastSyncTimestamp\\u201d with the current block timestamp and update \\u201ccumulatedRewards\\u201d with _getCumulatedRewardsIncrement(account) \\n     * @param _account address Address of the account whose rewards will be calculated.\\n     */\\n    function _sync(address _account) private {\\n        uint256 increment = _getCumulatedRewardsIncrement(_account);\\n        accounts[_account].cumulatedRewards += increment;\\n        accounts[_account].lastSyncTimestamp = block.timestamp;\\n        emit Sync(_account, increment);\\n    }\\n\\n    /**\\n     * @dev Claim rewards for staking.\\n     * @param _account address Address of the staking account.\\n     */\\n    function _claim(address _account) private {\\n        Account memory account = accounts[_account];\\n        // update states\\n        uint256 amount = account.cumulatedRewards - account.claimedRewards;\\n        require(amount > 0, \\\"HoprStake: Nothing to claim\\\");\\n        accounts[_account].claimedRewards = accounts[_account].cumulatedRewards;\\n        require(availableReward >= amount, \\\"HoprStake: Insufficient reward pool.\\\");\\n        availableReward -= amount;\\n        // send rewards to the account.\\n        IERC20(REWARD_TOKEN).safeTransfer(_account, amount);\\n        emit Claimed(_account, amount);\\n    }\\n}\",\"keccak256\":\"0x398a5b835901d67326db709391ae95d192928ca04cdb2a51ed2ab7b8f723b663\",\"license\":\"GPL-3.0-only\"},\"contracts/IHoprBoost.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IHoprBoost is IERC721 {\\n    /**\\n     * @dev Returns the boost factor and the redeem deadline associated with ``tokenId``.\\n     * @param tokenId uint256 token Id of the boost.\\n     */\\n    function boostOf(uint256 tokenId) external view returns (uint256, uint256);\\n    \\n    /**\\n     * @dev Returns the boost type index associated with ``tokenId``.\\n     * @param tokenId uint256 token Id of the boost.\\n     */\\n    function typeIndexOf(uint256 tokenId) external view returns (uint256);\\n}\",\"keccak256\":\"0x9f37f4c5accdb9fee42918f56ef5f07e8dd0a9910a4f42670e4d3adeca4b8429\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x6080604052600280546001600160a01b031990811673d057604a14982fe8d88c5fc25aac3267ea142a08179091556003805490911673d4fdec44db9d44b8f2b6d529620f9c0c7066a2c11790553480156200005957600080fd5b5060405162002446380380620024468339810160408190526200007c91620002cc565b62000087336200018a565b600180554660648114620000c657600280546001600160a01b038086166001600160a01b03199283161790925560038054928516929091169190911790555b600480546001600160a01b0319166001600160a01b038716179055620000ec84620001da565b6040516329965a1d60e01b815230600482018190527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b60248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad24906329965a1d90606401600060405180830381600087803b1580156200016657600080fd5b505af11580156200017b573d6000803e3d6000fd5b50505050505050505062000329565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031633146200023a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b038116620002a15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000231565b620002ac816200018a565b50565b80516001600160a01b0381168114620002c757600080fd5b919050565b60008060008060808587031215620002e357600080fd5b620002ee85620002af565b9350620002fe60208601620002af565b92506200030e60408601620002af565b91506200031e60608601620002af565b905092959194509250565b61210d80620003396000396000f3fe608060405234801561001057600080fd5b50600436106101d95760003560e01c806370af093411610104578063cbffa3c7116100a2578063ef0526a211610071578063ef0526a21461046e578063ef5cfb8c1461047f578063f20c912414610492578063f2fde38b1461049d57600080fd5b8063cbffa3c71461041d578063d0c02d6314610428578063d0da680114610448578063d56d229d1461045b57600080fd5b80638da5cb5b116100de5780638da5cb5b146103af57806399248ea7146103d4578063a4c0ed36146103e7578063a58411941461040a57600080fd5b806370af093414610369578063715018a61461037c57806381128c1d1461038457600080fd5b806348c64e411161017c5780635e5c06e21161014b5780635e5c06e2146102dc5780635ef73d58146103415780636067bc151461034d5780636aa8d4cf1461036057600080fd5b806348c64e41146102a45780634ad84b34146102b757806356891412146102c05780635c3c71f4146102c957600080fd5b8063150b7a02116101b8578063150b7a021461023c5780631f014d83146102685780632f6c493c146102885780632f9984681461029b57600080fd5b806223de29146101de5780630a1a257a146101f3578063112376dc14610231575b600080fd5b6101f16101ec366004611c2d565b6104b0565b005b61021e610201366004611d47565b600560209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b61021e636128d3c081565b61024f61024a366004611cd8565b61065d565b6040516001600160e01b03199091168152602001610228565b61021e610276366004611c12565b60086020526000908152604090205481565b6101f1610296366004611c12565b610b7f565b61021e611b7881565b6101f16102b2366004611d47565b610d6d565b61021e600b5481565b61021e600a5481565b6101f16102d7366004611e3c565b610e80565b6103196102ea366004611c12565b600960205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a001610228565b61021e64e8d4a5100081565b6101f161035b366004611c12565b611033565b61021e61169b81565b61021e610377366004611c12565b611205565b6101f1611216565b61021e610392366004611d47565b600760209081526000928352604080842090915290825290205481565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610228565b6003546103bc906001600160a01b031681565b6103fa6103f5366004611d71565b61124c565b6040519015158152602001610228565b6101f1610418366004611c12565b611374565b61021e6361e5685081565b61021e610436366004611c12565b60066020526000908152604090205481565b6002546103bc906001600160a01b031681565b6004546103bc906001600160a01b031681565b61021e69d3c21bcecceda100000081565b6101f161048d366004611c12565b611380565b61021e6360fff54081565b6101f16104ab366004611c12565b611392565b6003546001600160a01b0316331461051e5760405162461bcd60e51b815260206004820152602660248201527f486f70725374616b653a2053656e646572206d757374206265207778484f5052604482015265103a37b5b2b760d11b60648201526084015b60405180910390fd5b6001600160a01b038616301461059c5760405162461bcd60e51b815260206004820152603760248201527f486f70725374616b653a204d7573742062652073656e64696e6720746f6b656e60448201527f7320746f20486f70725374616b6520636f6e74726163740000000000000000006064820152608401610515565b6000546001600160a01b038881169116146106115760405162461bcd60e51b815260206004820152602f60248201527f486f70725374616b653a204f6e6c7920616363657074206f776e657220746f2060448201526e70726f76696465207265776172647360881b6064820152608401610515565b84600b60008282546106239190611fda565b909155505060405185907f2bf52bcae319602514e02ff69bbe4b89a19718b96e7867044128ec872419437c90600090a25050505050505050565b6004546000906001600160a01b0316336001600160a01b0316146106e95760405162461bcd60e51b815260206004820152603f60248201527f486f70725374616b653a2043616e6e6f7420536166655472616e73666572467260448201527f6f6d20746f6b656e73206f74686572207468616e20486f7072426f6f73742e006064820152608401610515565b6361e568504211156107555760405162461bcd60e51b815260206004820152602f60248201527f486f70725374616b653a2050726f6772616d20656e6465642c2063616e6e6f7460448201526e103932b232b2b6903137b7b9ba399760891b6064820152608401610515565b61075e8561142a565b6001600160a01b03851660008181526005602090815260408083206006808452828520805486529184529184208990559383529052815460019291906107a5908490611fda565b90915550506004805460405163562317c560e01b81529182018690526000916001600160a01b039091169063562317c59060240160206040518083038186803b1580156107f157600080fd5b505afa158015610805573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108299190611eca565b6004805460405163225b377d60e21b815291820188905291925060009182916001600160a01b039091169063896cddf490602401604080518083038186803b15801561087457600080fd5b505afa158015610888573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ac9190611ee3565b91509150804211156109135760405162461bcd60e51b815260206004820152602a60248201527f486f70725374616b653a2043616e6e6f742072656465656d20616e20657870696044820152693932b2103137b7b9ba1760b11b6064820152608401610515565b6001600160a01b038816600090815260086020526040812054905b81811015610ad0576001600160a01b038a811660009081526007602090815260408083208584529091528082205460048054925163225b377d60e21b81529081018e90529093919091169063896cddf490602401604080518083038186803b15801561099957600080fd5b505afa1580156109ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d19190611ee3565b506004805460405163562317c560e01b815291820185905291925088916001600160a01b03169063562317c59060240160206040518083038186803b158015610a1957600080fd5b505afa158015610a2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a519190611eca565b148015610a5e5750858111155b15610abb576001600160a01b038c1660008181526007602090815260408083208784529091528082208e90555190918d917f066d96cb280fccf3a0a3a5686966a801b2690a32ec98fd2711a4e09f345d935d908490a45050610ad0565b50508080610ac89061207a565b91505061092e565b81811415610b68576001600160a01b038a16600081815260076020908152604080832086845282528083208d905592825260089052908120805460019290610b19908490611fda565b90915550508115610b2b576001610b2e565b60005b1515898b6001600160a01b03167f066d96cb280fccf3a0a3a5686966a801b2690a32ec98fd2711a4e09f345d935d60405160405180910390a45b50630a85bd0160e11b9a9950505050505050505050565b6361e568504211610bee5760405162461bcd60e51b815260206004820152603360248201527f486f70725374616b653a2050726f6772616d206973206f6e676f696e672c206360448201527230b73737ba103ab73637b1b59039ba30b5b29760691b6064820152608401610515565b6001600160a01b03811660009081526009602052604090208054600190910154610c178361142a565b6001600160a01b0383166000908152600960205260408120818155600101819055600a8054849290610c4a908490612033565b90915550610c599050836114b5565b600254610c70906001600160a01b03168484611655565b60005b6001600160a01b038416600090815260066020526040902054811015610d2f57600480546001600160a01b038681166000818152600560209081526040808320888452909152908190205490516323b872dd60e01b815230958101959095526024850191909152604484015216906323b872dd90606401600060405180830381600087803b158015610d0457600080fd5b505af1158015610d18573d6000803e3d6000fd5b505050508080610d279061207a565b915050610c73565b508082846001600160a01b03167f82e416ba72d10e709b5de7ac16f5f49ff1d94f22d55bf582d353d3c313a1e8dd60405160405180910390a4505050565b6000546001600160a01b03163314610d975760405162461bcd60e51b815260040161051590611fa5565b60026001541415610dea5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610515565b60026001556001600160a01b0382166323b872dd30610e116000546001600160a01b031690565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260448101849052606401600060405180830381600087803b158015610e6057600080fd5b505af1158015610e74573d6000803e3d6000fd5b50506001805550505050565b6000546001600160a01b03163314610eaa5760405162461bcd60e51b815260040161051590611fa5565b6360fff540421115610ece5760405162461bcd60e51b815260040161051590611f56565b80831115610f1e5760405162461bcd60e51b815260206004820181905260248201527f486f70725374616b653a204c656e67746820646f6573206e6f74206d617463686044820152606401610515565b60005b8381101561102c576000858583818110610f3d57610f3d6120ab565b9050602002016020810190610f529190611c12565b9050838383818110610f6657610f666120ab565b9050602002013560096000836001600160a01b03166001600160a01b031681526020019081526020016000206001016000828254610fa49190611fda565b90915550506001600160a01b038116600090815260096020526040902042600290910155838383818110610fda57610fda6120ab565b905060200201356000826001600160a01b03167f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee9060405160405180910390a450806110248161207a565b915050610f21565b5050505050565b6000546001600160a01b0316331461105d5760405162461bcd60e51b815260040161051590611fa5565b600260015414156110b05760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610515565b60026001819055546000906001600160a01b038381169116141561115d57600a546002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561111457600080fd5b505afa158015611128573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114c9190611eca565b6111569190612033565b90506111d7565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a082319060240160206040518083038186803b15801561119c57600080fd5b505afa1580156111b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d49190611eca565b90505b6111fd6111ec6000546001600160a01b031690565b6001600160a01b0384169083611655565b505060018055565b6000611210826116ac565b92915050565b6000546001600160a01b031633146112405760405162461bcd60e51b815260040161051590611fa5565b61124a6000611915565b565b6002546000906001600160a01b031633146112be5760405162461bcd60e51b815260206004820152602c60248201527f486f70725374616b653a204f6e6c7920616363657074204c4f434b5f544f4b4560448201526b4e20696e207374616b696e6760a01b6064820152608401610515565b6361e568504211156112e25760405162461bcd60e51b815260040161051590611f56565b6112eb8461142a565b6001600160a01b03841660009081526009602052604081208054859290611313908490611fda565b9250508190555082600a600082825461132c9190611fda565b909155505060405160009084906001600160a01b038716907f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90908490a45060015b9392505050565b61137d8161142a565b50565b6113898161142a565b61137d816114b5565b6000546001600160a01b031633146113bc5760405162461bcd60e51b815260040161051590611fa5565b6001600160a01b0381166114215760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610515565b61137d81611915565b6000611435826116ac565b6001600160a01b038316600090815260096020526040812060030180549293508392909190611465908490611fda565b90915550506001600160a01b03821660008181526009602052604080822042600290910155518392917f99869d968ca3581a661f31abb3a6aa70ccec5cdc49855eab174cf9e00a2462db91a35050565b6001600160a01b0381166000908152600960209081526040808320815160a081018352815481526001820154938101939093526002810154918301919091526003810154606083018190526004909101546080830181905291929161151991612033565b90506000811161156b5760405162461bcd60e51b815260206004820152601b60248201527f486f70725374616b653a204e6f7468696e6720746f20636c61696d00000000006044820152606401610515565b6001600160a01b03831660009081526009602052604090206003810154600490910155600b548111156115ec5760405162461bcd60e51b8152602060048201526024808201527f486f70725374616b653a20496e73756666696369656e7420726577617264207060448201526337b7b61760e11b6064820152608401610515565b80600b60008282546115fe9190612033565b909155505060035461161a906001600160a01b03168483611655565b60405181906001600160a01b038516907fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a90600090a3505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526116a7908490611965565b505050565b6001600160a01b0381166000908152600960209081526040808320815160a08101835281548152600182015493810193909352600281015491830191909152600381015460608301526004015460808201526360fff5404211158061171957506361e56850816040015110155b156117275750600092915050565b80516000906117399061169b90612014565b905060005b6001600160a01b038516600090815260086020526040902054811015611840576001600160a01b0385811660009081526007602090815260408083208584529091528082205460048054925163225b377d60e21b81529081018290529093919091169063896cddf490602401604080518083038186803b1580156117c157600080fd5b505afa1580156117d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f99190611ee3565b50855190915081906118159069d3c21bcecceda1000000611a37565b61181f9190612014565b6118299085611fda565b9350505080806118389061207a565b91505061173e565b5064e8d4a510006118706361e5685061186a636128d3c08660400151611a4d90919063ffffffff16565b90611a37565b6118866361e5685061186a42636128d3c0611a4d565b6118909190612033565b611b7884602001516118a29190612014565b6118ac9190612014565b6118cf6361e5685061186a6360fff5408760400151611a4d90919063ffffffff16565b6118e56361e5685061186a426360fff540611a4d565b6118ef9190612033565b6118f99084612014565b6119039190611fda565b61190d9190611ff2565b949350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006119ba826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611a5d9092919063ffffffff16565b8051909150156116a757808060200190518101906119d89190611ea8565b6116a75760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610515565b6000818310611a46578161136d565b5090919050565b600081831015611a46578161136d565b606061190d848460008585843b611ab65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610515565b600080866001600160a01b03168587604051611ad29190611f07565b60006040518083038185875af1925050503d8060008114611b0f576040519150601f19603f3d011682016040523d82523d6000602084013e611b14565b606091505b5091509150611b24828286611b2f565b979650505050505050565b60608315611b3e57508161136d565b825115611b4e5782518084602001fd5b8160405162461bcd60e51b81526004016105159190611f23565b80356001600160a01b0381168114611b7f57600080fd5b919050565b60008083601f840112611b9657600080fd5b50813567ffffffffffffffff811115611bae57600080fd5b6020830191508360208260051b8501011115611bc957600080fd5b9250929050565b60008083601f840112611be257600080fd5b50813567ffffffffffffffff811115611bfa57600080fd5b602083019150836020828501011115611bc957600080fd5b600060208284031215611c2457600080fd5b61136d82611b68565b60008060008060008060008060c0898b031215611c4957600080fd5b611c5289611b68565b9750611c6060208a01611b68565b9650611c6e60408a01611b68565b955060608901359450608089013567ffffffffffffffff80821115611c9257600080fd5b611c9e8c838d01611bd0565b909650945060a08b0135915080821115611cb757600080fd5b50611cc48b828c01611bd0565b999c989b5096995094979396929594505050565b600080600080600060808688031215611cf057600080fd5b611cf986611b68565b9450611d0760208701611b68565b935060408601359250606086013567ffffffffffffffff811115611d2a57600080fd5b611d3688828901611bd0565b969995985093965092949392505050565b60008060408385031215611d5a57600080fd5b611d6383611b68565b946020939093013593505050565b600080600060608486031215611d8657600080fd5b611d8f84611b68565b925060208401359150604084013567ffffffffffffffff80821115611db357600080fd5b818601915086601f830112611dc757600080fd5b813581811115611dd957611dd96120c1565b604051601f8201601f19908116603f01168101908382118183101715611e0157611e016120c1565b81604052828152896020848701011115611e1a57600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60008060008060408587031215611e5257600080fd5b843567ffffffffffffffff80821115611e6a57600080fd5b611e7688838901611b84565b90965094506020870135915080821115611e8f57600080fd5b50611e9c87828801611b84565b95989497509550505050565b600060208284031215611eba57600080fd5b8151801515811461136d57600080fd5b600060208284031215611edc57600080fd5b5051919050565b60008060408385031215611ef657600080fd5b505080516020909101519092909150565b60008251611f1981846020870161204a565b9190910192915050565b6020815260008251806020840152611f4281604085016020870161204a565b601f01601f19169190910160400192915050565b6020808252602f908201527f486f70725374616b653a2050726f6772616d20656e6465642c2063616e6e6f7460408201526e1039ba30b5b29030b73cb6b7b9329760891b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115611fed57611fed612095565b500190565b60008261200f57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561202e5761202e612095565b500290565b60008282101561204557612045612095565b500390565b60005b8381101561206557818101518382015260200161204d565b83811115612074576000848401525b50505050565b600060001982141561208e5761208e612095565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212207e3eee329fb865e9474bd93a781deed1ed72002f2929cfffa7cd2da1608a565764736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101d95760003560e01c806370af093411610104578063cbffa3c7116100a2578063ef0526a211610071578063ef0526a21461046e578063ef5cfb8c1461047f578063f20c912414610492578063f2fde38b1461049d57600080fd5b8063cbffa3c71461041d578063d0c02d6314610428578063d0da680114610448578063d56d229d1461045b57600080fd5b80638da5cb5b116100de5780638da5cb5b146103af57806399248ea7146103d4578063a4c0ed36146103e7578063a58411941461040a57600080fd5b806370af093414610369578063715018a61461037c57806381128c1d1461038457600080fd5b806348c64e411161017c5780635e5c06e21161014b5780635e5c06e2146102dc5780635ef73d58146103415780636067bc151461034d5780636aa8d4cf1461036057600080fd5b806348c64e41146102a45780634ad84b34146102b757806356891412146102c05780635c3c71f4146102c957600080fd5b8063150b7a02116101b8578063150b7a021461023c5780631f014d83146102685780632f6c493c146102885780632f9984681461029b57600080fd5b806223de29146101de5780630a1a257a146101f3578063112376dc14610231575b600080fd5b6101f16101ec366004611c2d565b6104b0565b005b61021e610201366004611d47565b600560209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b61021e636128d3c081565b61024f61024a366004611cd8565b61065d565b6040516001600160e01b03199091168152602001610228565b61021e610276366004611c12565b60086020526000908152604090205481565b6101f1610296366004611c12565b610b7f565b61021e611b7881565b6101f16102b2366004611d47565b610d6d565b61021e600b5481565b61021e600a5481565b6101f16102d7366004611e3c565b610e80565b6103196102ea366004611c12565b600960205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a001610228565b61021e64e8d4a5100081565b6101f161035b366004611c12565b611033565b61021e61169b81565b61021e610377366004611c12565b611205565b6101f1611216565b61021e610392366004611d47565b600760209081526000928352604080842090915290825290205481565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610228565b6003546103bc906001600160a01b031681565b6103fa6103f5366004611d71565b61124c565b6040519015158152602001610228565b6101f1610418366004611c12565b611374565b61021e6361e5685081565b61021e610436366004611c12565b60066020526000908152604090205481565b6002546103bc906001600160a01b031681565b6004546103bc906001600160a01b031681565b61021e69d3c21bcecceda100000081565b6101f161048d366004611c12565b611380565b61021e6360fff54081565b6101f16104ab366004611c12565b611392565b6003546001600160a01b0316331461051e5760405162461bcd60e51b815260206004820152602660248201527f486f70725374616b653a2053656e646572206d757374206265207778484f5052604482015265103a37b5b2b760d11b60648201526084015b60405180910390fd5b6001600160a01b038616301461059c5760405162461bcd60e51b815260206004820152603760248201527f486f70725374616b653a204d7573742062652073656e64696e6720746f6b656e60448201527f7320746f20486f70725374616b6520636f6e74726163740000000000000000006064820152608401610515565b6000546001600160a01b038881169116146106115760405162461bcd60e51b815260206004820152602f60248201527f486f70725374616b653a204f6e6c7920616363657074206f776e657220746f2060448201526e70726f76696465207265776172647360881b6064820152608401610515565b84600b60008282546106239190611fda565b909155505060405185907f2bf52bcae319602514e02ff69bbe4b89a19718b96e7867044128ec872419437c90600090a25050505050505050565b6004546000906001600160a01b0316336001600160a01b0316146106e95760405162461bcd60e51b815260206004820152603f60248201527f486f70725374616b653a2043616e6e6f7420536166655472616e73666572467260448201527f6f6d20746f6b656e73206f74686572207468616e20486f7072426f6f73742e006064820152608401610515565b6361e568504211156107555760405162461bcd60e51b815260206004820152602f60248201527f486f70725374616b653a2050726f6772616d20656e6465642c2063616e6e6f7460448201526e103932b232b2b6903137b7b9ba399760891b6064820152608401610515565b61075e8561142a565b6001600160a01b03851660008181526005602090815260408083206006808452828520805486529184529184208990559383529052815460019291906107a5908490611fda565b90915550506004805460405163562317c560e01b81529182018690526000916001600160a01b039091169063562317c59060240160206040518083038186803b1580156107f157600080fd5b505afa158015610805573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108299190611eca565b6004805460405163225b377d60e21b815291820188905291925060009182916001600160a01b039091169063896cddf490602401604080518083038186803b15801561087457600080fd5b505afa158015610888573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ac9190611ee3565b91509150804211156109135760405162461bcd60e51b815260206004820152602a60248201527f486f70725374616b653a2043616e6e6f742072656465656d20616e20657870696044820152693932b2103137b7b9ba1760b11b6064820152608401610515565b6001600160a01b038816600090815260086020526040812054905b81811015610ad0576001600160a01b038a811660009081526007602090815260408083208584529091528082205460048054925163225b377d60e21b81529081018e90529093919091169063896cddf490602401604080518083038186803b15801561099957600080fd5b505afa1580156109ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d19190611ee3565b506004805460405163562317c560e01b815291820185905291925088916001600160a01b03169063562317c59060240160206040518083038186803b158015610a1957600080fd5b505afa158015610a2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a519190611eca565b148015610a5e5750858111155b15610abb576001600160a01b038c1660008181526007602090815260408083208784529091528082208e90555190918d917f066d96cb280fccf3a0a3a5686966a801b2690a32ec98fd2711a4e09f345d935d908490a45050610ad0565b50508080610ac89061207a565b91505061092e565b81811415610b68576001600160a01b038a16600081815260076020908152604080832086845282528083208d905592825260089052908120805460019290610b19908490611fda565b90915550508115610b2b576001610b2e565b60005b1515898b6001600160a01b03167f066d96cb280fccf3a0a3a5686966a801b2690a32ec98fd2711a4e09f345d935d60405160405180910390a45b50630a85bd0160e11b9a9950505050505050505050565b6361e568504211610bee5760405162461bcd60e51b815260206004820152603360248201527f486f70725374616b653a2050726f6772616d206973206f6e676f696e672c206360448201527230b73737ba103ab73637b1b59039ba30b5b29760691b6064820152608401610515565b6001600160a01b03811660009081526009602052604090208054600190910154610c178361142a565b6001600160a01b0383166000908152600960205260408120818155600101819055600a8054849290610c4a908490612033565b90915550610c599050836114b5565b600254610c70906001600160a01b03168484611655565b60005b6001600160a01b038416600090815260066020526040902054811015610d2f57600480546001600160a01b038681166000818152600560209081526040808320888452909152908190205490516323b872dd60e01b815230958101959095526024850191909152604484015216906323b872dd90606401600060405180830381600087803b158015610d0457600080fd5b505af1158015610d18573d6000803e3d6000fd5b505050508080610d279061207a565b915050610c73565b508082846001600160a01b03167f82e416ba72d10e709b5de7ac16f5f49ff1d94f22d55bf582d353d3c313a1e8dd60405160405180910390a4505050565b6000546001600160a01b03163314610d975760405162461bcd60e51b815260040161051590611fa5565b60026001541415610dea5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610515565b60026001556001600160a01b0382166323b872dd30610e116000546001600160a01b031690565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260448101849052606401600060405180830381600087803b158015610e6057600080fd5b505af1158015610e74573d6000803e3d6000fd5b50506001805550505050565b6000546001600160a01b03163314610eaa5760405162461bcd60e51b815260040161051590611fa5565b6360fff540421115610ece5760405162461bcd60e51b815260040161051590611f56565b80831115610f1e5760405162461bcd60e51b815260206004820181905260248201527f486f70725374616b653a204c656e67746820646f6573206e6f74206d617463686044820152606401610515565b60005b8381101561102c576000858583818110610f3d57610f3d6120ab565b9050602002016020810190610f529190611c12565b9050838383818110610f6657610f666120ab565b9050602002013560096000836001600160a01b03166001600160a01b031681526020019081526020016000206001016000828254610fa49190611fda565b90915550506001600160a01b038116600090815260096020526040902042600290910155838383818110610fda57610fda6120ab565b905060200201356000826001600160a01b03167f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee9060405160405180910390a450806110248161207a565b915050610f21565b5050505050565b6000546001600160a01b0316331461105d5760405162461bcd60e51b815260040161051590611fa5565b600260015414156110b05760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610515565b60026001819055546000906001600160a01b038381169116141561115d57600a546002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561111457600080fd5b505afa158015611128573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114c9190611eca565b6111569190612033565b90506111d7565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a082319060240160206040518083038186803b15801561119c57600080fd5b505afa1580156111b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d49190611eca565b90505b6111fd6111ec6000546001600160a01b031690565b6001600160a01b0384169083611655565b505060018055565b6000611210826116ac565b92915050565b6000546001600160a01b031633146112405760405162461bcd60e51b815260040161051590611fa5565b61124a6000611915565b565b6002546000906001600160a01b031633146112be5760405162461bcd60e51b815260206004820152602c60248201527f486f70725374616b653a204f6e6c7920616363657074204c4f434b5f544f4b4560448201526b4e20696e207374616b696e6760a01b6064820152608401610515565b6361e568504211156112e25760405162461bcd60e51b815260040161051590611f56565b6112eb8461142a565b6001600160a01b03841660009081526009602052604081208054859290611313908490611fda565b9250508190555082600a600082825461132c9190611fda565b909155505060405160009084906001600160a01b038716907f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90908490a45060015b9392505050565b61137d8161142a565b50565b6113898161142a565b61137d816114b5565b6000546001600160a01b031633146113bc5760405162461bcd60e51b815260040161051590611fa5565b6001600160a01b0381166114215760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610515565b61137d81611915565b6000611435826116ac565b6001600160a01b038316600090815260096020526040812060030180549293508392909190611465908490611fda565b90915550506001600160a01b03821660008181526009602052604080822042600290910155518392917f99869d968ca3581a661f31abb3a6aa70ccec5cdc49855eab174cf9e00a2462db91a35050565b6001600160a01b0381166000908152600960209081526040808320815160a081018352815481526001820154938101939093526002810154918301919091526003810154606083018190526004909101546080830181905291929161151991612033565b90506000811161156b5760405162461bcd60e51b815260206004820152601b60248201527f486f70725374616b653a204e6f7468696e6720746f20636c61696d00000000006044820152606401610515565b6001600160a01b03831660009081526009602052604090206003810154600490910155600b548111156115ec5760405162461bcd60e51b8152602060048201526024808201527f486f70725374616b653a20496e73756666696369656e7420726577617264207060448201526337b7b61760e11b6064820152608401610515565b80600b60008282546115fe9190612033565b909155505060035461161a906001600160a01b03168483611655565b60405181906001600160a01b038516907fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a90600090a3505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526116a7908490611965565b505050565b6001600160a01b0381166000908152600960209081526040808320815160a08101835281548152600182015493810193909352600281015491830191909152600381015460608301526004015460808201526360fff5404211158061171957506361e56850816040015110155b156117275750600092915050565b80516000906117399061169b90612014565b905060005b6001600160a01b038516600090815260086020526040902054811015611840576001600160a01b0385811660009081526007602090815260408083208584529091528082205460048054925163225b377d60e21b81529081018290529093919091169063896cddf490602401604080518083038186803b1580156117c157600080fd5b505afa1580156117d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f99190611ee3565b50855190915081906118159069d3c21bcecceda1000000611a37565b61181f9190612014565b6118299085611fda565b9350505080806118389061207a565b91505061173e565b5064e8d4a510006118706361e5685061186a636128d3c08660400151611a4d90919063ffffffff16565b90611a37565b6118866361e5685061186a42636128d3c0611a4d565b6118909190612033565b611b7884602001516118a29190612014565b6118ac9190612014565b6118cf6361e5685061186a6360fff5408760400151611a4d90919063ffffffff16565b6118e56361e5685061186a426360fff540611a4d565b6118ef9190612033565b6118f99084612014565b6119039190611fda565b61190d9190611ff2565b949350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006119ba826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611a5d9092919063ffffffff16565b8051909150156116a757808060200190518101906119d89190611ea8565b6116a75760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610515565b6000818310611a46578161136d565b5090919050565b600081831015611a46578161136d565b606061190d848460008585843b611ab65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610515565b600080866001600160a01b03168587604051611ad29190611f07565b60006040518083038185875af1925050503d8060008114611b0f576040519150601f19603f3d011682016040523d82523d6000602084013e611b14565b606091505b5091509150611b24828286611b2f565b979650505050505050565b60608315611b3e57508161136d565b825115611b4e5782518084602001fd5b8160405162461bcd60e51b81526004016105159190611f23565b80356001600160a01b0381168114611b7f57600080fd5b919050565b60008083601f840112611b9657600080fd5b50813567ffffffffffffffff811115611bae57600080fd5b6020830191508360208260051b8501011115611bc957600080fd5b9250929050565b60008083601f840112611be257600080fd5b50813567ffffffffffffffff811115611bfa57600080fd5b602083019150836020828501011115611bc957600080fd5b600060208284031215611c2457600080fd5b61136d82611b68565b60008060008060008060008060c0898b031215611c4957600080fd5b611c5289611b68565b9750611c6060208a01611b68565b9650611c6e60408a01611b68565b955060608901359450608089013567ffffffffffffffff80821115611c9257600080fd5b611c9e8c838d01611bd0565b909650945060a08b0135915080821115611cb757600080fd5b50611cc48b828c01611bd0565b999c989b5096995094979396929594505050565b600080600080600060808688031215611cf057600080fd5b611cf986611b68565b9450611d0760208701611b68565b935060408601359250606086013567ffffffffffffffff811115611d2a57600080fd5b611d3688828901611bd0565b969995985093965092949392505050565b60008060408385031215611d5a57600080fd5b611d6383611b68565b946020939093013593505050565b600080600060608486031215611d8657600080fd5b611d8f84611b68565b925060208401359150604084013567ffffffffffffffff80821115611db357600080fd5b818601915086601f830112611dc757600080fd5b813581811115611dd957611dd96120c1565b604051601f8201601f19908116603f01168101908382118183101715611e0157611e016120c1565b81604052828152896020848701011115611e1a57600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60008060008060408587031215611e5257600080fd5b843567ffffffffffffffff80821115611e6a57600080fd5b611e7688838901611b84565b90965094506020870135915080821115611e8f57600080fd5b50611e9c87828801611b84565b95989497509550505050565b600060208284031215611eba57600080fd5b8151801515811461136d57600080fd5b600060208284031215611edc57600080fd5b5051919050565b60008060408385031215611ef657600080fd5b505080516020909101519092909150565b60008251611f1981846020870161204a565b9190910192915050565b6020815260008251806020840152611f4281604085016020870161204a565b601f01601f19169190910160400192915050565b6020808252602f908201527f486f70725374616b653a2050726f6772616d20656e6465642c2063616e6e6f7460408201526e1039ba30b5b29030b73cb6b7b9329760891b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115611fed57611fed612095565b500190565b60008261200f57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561202e5761202e612095565b500290565b60008282101561204557612045612095565b500390565b60005b8381101561206557818101518382015260200161204d565b83811115612074576000848401525b50505050565b600060001982141561208e5761208e612095565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212207e3eee329fb865e9474bd93a781deed1ed72002f2929cfffa7cd2da1608a565764736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimRewards(address)": {
        "details": "Sync rewards and claim them",
        "params": {
          "account": "address Account whose stake rewards will be synced and claimed."
        }
      },
      "constructor": {
        "details": "Provide NFT contract address. Transfer owner role to the new owner address.  At deployment, it also registers the lock contract as an ERC777 recipient. ",
        "params": {
          "_newOwner": "address Address of the new owner. This new owner can reclaim any ERC20 and ERC721 token being accidentally sent to the lock contract. ",
          "_nftAddress": "address Address of the NFT contract."
        }
      },
      "getCumulatedRewardsIncrement(address)": {
        "details": "Returns the increment of cumulated rewards during the “lastSyncTimestamp” and current block.timestamp. ",
        "params": {
          "_account": "address Address of the account whose rewards will be calculated."
        }
      },
      "lock(address[],uint256[])": {
        "details": "Only owner can call this function before program starts to store virtual lock for seed investors.  If the investor hasn't locked any token in this account, create an \"Account\" with {0, caps[i], block.timestamp, 0, 0}.  If the investor has locked some tokens in this account, update its “virtualLockedTokenAmount”.",
        "params": {
          "caps": "uint256[] Array of their virtually locked tokens.",
          "investors": "address[] Array of seed investors accounts."
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "Whenever a boost `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} when redeeming, this function is called. Boost factor associated with the  It must return its Solidity selector to confirm the token transfer upon success.",
        "params": {
          "data": "bytes hex information provided by the token holder (if any)",
          "from": "address token holder address",
          "operator": "address operator requesting the transfer",
          "tokenId": "uint256 amount of tokens to transfer"
        }
      },
      "onTokenTransfer(address,uint256,bytes)": {
        "details": "ERC677 hook. Token holders can send their tokens with `transferAndCall` to the stake contract.   After PROGRAM_END, it refuses tokens; Before PROGRAM_END, it accepts tokens xHOPR token, sync  Account state, and update totalLocked. ",
        "params": {
          "_data": "bytes Data being sent along with token transfer",
          "_from": "address Address of tokens sender",
          "_value": "uint256 token amount being transferred"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "reclaimErc20Tokens(address)": {
        "details": "Reclaim any ERC20 token being accidentally sent to the contract.",
        "params": {
          "tokenAddress": "address ERC20 token address."
        }
      },
      "reclaimErc721Tokens(address,uint256)": {
        "details": "Reclaim any ERC721 token being accidentally sent to the contract.",
        "params": {
          "tokenAddress": "address ERC721 token address."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "sync(address)": {
        "details": "Manually sync account's reward states",
        "params": {
          "account": "address Account whose stake rewards will be synced."
        }
      },
      "tokensReceived(address,address,address,uint256,bytes,bytes)": {
        "details": "ERC777 hook. To receive wxHOPR to fuel the reward pool with `send()` method. It updates the availableReward by tokenAmount.",
        "params": {
          "amount": "uint256 amount of tokens to transfer",
          "from": "address token holder address",
          "operator": "address operator requesting the transfer",
          "operatorData": "bytes extra information provided by the operator (if any)",
          "to": "address recipient address",
          "userData": "bytes hex information provided by the token holder (if any)"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unlock(address)": {
        "details": "Unlock staking",
        "params": {
          "account": "address Account that staked tokens."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimRewards(address)": {
        "notice": "public function of ``_sync`` + ``_claim``"
      },
      "sync(address)": {
        "notice": "public function of ``_sync``."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 565,
        "contract": "contracts/HoprStake.sol:HoprStake",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 672,
        "contract": "contracts/HoprStake.sol:HoprStake",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 6188,
        "contract": "contracts/HoprStake.sol:HoprStake",
        "label": "LOCK_TOKEN",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 6191,
        "contract": "contracts/HoprStake.sol:HoprStake",
        "label": "REWARD_TOKEN",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 6194,
        "contract": "contracts/HoprStake.sol:HoprStake",
        "label": "nftContract",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IHoprBoost)7150"
      },
      {
        "astId": 6200,
        "contract": "contracts/HoprStake.sol:HoprStake",
        "label": "redeemedNft",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 6204,
        "contract": "contracts/HoprStake.sol:HoprStake",
        "label": "redeemedNftIndex",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6210,
        "contract": "contracts/HoprStake.sol:HoprStake",
        "label": "redeemedFactor",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 6214,
        "contract": "contracts/HoprStake.sol:HoprStake",
        "label": "redeemedFactorIndex",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6219,
        "contract": "contracts/HoprStake.sol:HoprStake",
        "label": "accounts",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_struct(Account)6164_storage)"
      },
      {
        "astId": 6221,
        "contract": "contracts/HoprStake.sol:HoprStake",
        "label": "totalLocked",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 6223,
        "contract": "contracts/HoprStake.sol:HoprStake",
        "label": "availableReward",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IHoprBoost)7150": {
        "encoding": "inplace",
        "label": "contract IHoprBoost",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Account)6164_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct HoprStake.Account)",
        "numberOfBytes": "32",
        "value": "t_struct(Account)6164_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Account)6164_storage": {
        "encoding": "inplace",
        "label": "struct HoprStake.Account",
        "members": [
          {
            "astId": 6155,
            "contract": "contracts/HoprStake.sol:HoprStake",
            "label": "actualLockedTokenAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6157,
            "contract": "contracts/HoprStake.sol:HoprStake",
            "label": "virtualLockedTokenAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6159,
            "contract": "contracts/HoprStake.sol:HoprStake",
            "label": "lastSyncTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6161,
            "contract": "contracts/HoprStake.sol:HoprStake",
            "label": "cumulatedRewards",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6163,
            "contract": "contracts/HoprStake.sol:HoprStake",
            "label": "claimedRewards",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}